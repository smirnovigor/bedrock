import { SENSITIVE_STRING } from "@smithy/smithy-client";
import { BedrockAgentServiceException as __BaseException } from "./BedrockAgentServiceException";
export class AccessDeniedException extends __BaseException {
    constructor(opts) {
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts,
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
    }
}
export const CustomControlMethod = {
    RETURN_CONTROL: "RETURN_CONTROL",
};
export var ActionGroupExecutor;
(function (ActionGroupExecutor) {
    ActionGroupExecutor.visit = (value, visitor) => {
        if (value.lambda !== undefined)
            return visitor.lambda(value.lambda);
        if (value.customControl !== undefined)
            return visitor.customControl(value.customControl);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(ActionGroupExecutor || (ActionGroupExecutor = {}));
export class ConflictException extends __BaseException {
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConflictException.prototype);
    }
}
export const ActionGroupState = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
export var APISchema;
(function (APISchema) {
    APISchema.visit = (value, visitor) => {
        if (value.s3 !== undefined)
            return visitor.s3(value.s3);
        if (value.payload !== undefined)
            return visitor.payload(value.payload);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(APISchema || (APISchema = {}));
export const Type = {
    ARRAY: "array",
    BOOLEAN: "boolean",
    INTEGER: "integer",
    NUMBER: "number",
    STRING: "string",
};
export var FunctionSchema;
(function (FunctionSchema) {
    FunctionSchema.visit = (value, visitor) => {
        if (value.functions !== undefined)
            return visitor.functions(value.functions);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(FunctionSchema || (FunctionSchema = {}));
export const ActionGroupSignature = {
    AMAZON_CODEINTERPRETER: "AMAZON.CodeInterpreter",
    AMAZON_USERINPUT: "AMAZON.UserInput",
};
export class InternalServerException extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalServerException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServerException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServerException.prototype);
    }
}
export class ResourceNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
    }
}
export class ServiceQuotaExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "ServiceQuotaExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "ServiceQuotaExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ServiceQuotaExceededException.prototype);
    }
}
export class ThrottlingException extends __BaseException {
    constructor(opts) {
        super({
            name: "ThrottlingException",
            $fault: "client",
            ...opts,
        });
        this.name = "ThrottlingException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ThrottlingException.prototype);
    }
}
export class ValidationException extends __BaseException {
    constructor(opts) {
        super({
            name: "ValidationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ValidationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ValidationException.prototype);
        this.fieldList = opts.fieldList;
    }
}
export const AgentStatus = {
    CREATING: "CREATING",
    DELETING: "DELETING",
    FAILED: "FAILED",
    NOT_PREPARED: "NOT_PREPARED",
    PREPARED: "PREPARED",
    PREPARING: "PREPARING",
    UPDATING: "UPDATING",
    VERSIONING: "VERSIONING",
};
export const MemoryType = {
    SESSION_SUMMARY: "SESSION_SUMMARY",
};
export const CreationMode = {
    DEFAULT: "DEFAULT",
    OVERRIDDEN: "OVERRIDDEN",
};
export const PromptState = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
export const PromptType = {
    KNOWLEDGE_BASE_RESPONSE_GENERATION: "KNOWLEDGE_BASE_RESPONSE_GENERATION",
    ORCHESTRATION: "ORCHESTRATION",
    POST_PROCESSING: "POST_PROCESSING",
    PRE_PROCESSING: "PRE_PROCESSING",
};
export const AgentAliasStatus = {
    CREATING: "CREATING",
    DELETING: "DELETING",
    FAILED: "FAILED",
    PREPARED: "PREPARED",
    UPDATING: "UPDATING",
};
export const KnowledgeBaseState = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
export const DataDeletionPolicy = {
    DELETE: "DELETE",
    RETAIN: "RETAIN",
};
export const CrawlFilterConfigurationType = {
    PATTERN: "PATTERN",
};
export const ConfluenceAuthType = {
    BASIC: "BASIC",
    OAUTH2_CLIENT_CREDENTIALS: "OAUTH2_CLIENT_CREDENTIALS",
};
export const ConfluenceHostType = {
    SAAS: "SAAS",
};
export const SalesforceAuthType = {
    OAUTH2_CLIENT_CREDENTIALS: "OAUTH2_CLIENT_CREDENTIALS",
};
export const SharePointAuthType = {
    OAUTH2_CLIENT_CREDENTIALS: "OAUTH2_CLIENT_CREDENTIALS",
};
export const SharePointHostType = {
    ONLINE: "ONLINE",
};
export const DataSourceType = {
    CONFLUENCE: "CONFLUENCE",
    S3: "S3",
    SALESFORCE: "SALESFORCE",
    SHAREPOINT: "SHAREPOINT",
    WEB: "WEB",
};
export const WebScopeType = {
    HOST_ONLY: "HOST_ONLY",
    SUBDOMAINS: "SUBDOMAINS",
};
export const ChunkingStrategy = {
    FIXED_SIZE: "FIXED_SIZE",
    HIERARCHICAL: "HIERARCHICAL",
    NONE: "NONE",
    SEMANTIC: "SEMANTIC",
};
export const StepType = {
    POST_CHUNKING: "POST_CHUNKING",
};
export const ParsingStrategy = {
    BEDROCK_FOUNDATION_MODEL: "BEDROCK_FOUNDATION_MODEL",
};
export const DataSourceStatus = {
    AVAILABLE: "AVAILABLE",
    DELETE_UNSUCCESSFUL: "DELETE_UNSUCCESSFUL",
    DELETING: "DELETING",
};
export var FlowConnectionConfiguration;
(function (FlowConnectionConfiguration) {
    FlowConnectionConfiguration.visit = (value, visitor) => {
        if (value.data !== undefined)
            return visitor.data(value.data);
        if (value.conditional !== undefined)
            return visitor.conditional(value.conditional);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(FlowConnectionConfiguration || (FlowConnectionConfiguration = {}));
export const FlowConnectionType = {
    CONDITIONAL: "Conditional",
    DATA: "Data",
};
export var PromptInferenceConfiguration;
(function (PromptInferenceConfiguration) {
    PromptInferenceConfiguration.visit = (value, visitor) => {
        if (value.text !== undefined)
            return visitor.text(value.text);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(PromptInferenceConfiguration || (PromptInferenceConfiguration = {}));
export var PromptTemplateConfiguration;
(function (PromptTemplateConfiguration) {
    PromptTemplateConfiguration.visit = (value, visitor) => {
        if (value.text !== undefined)
            return visitor.text(value.text);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(PromptTemplateConfiguration || (PromptTemplateConfiguration = {}));
export const PromptTemplateType = {
    TEXT: "TEXT",
};
export var PromptFlowNodeSourceConfiguration;
(function (PromptFlowNodeSourceConfiguration) {
    PromptFlowNodeSourceConfiguration.visit = (value, visitor) => {
        if (value.resource !== undefined)
            return visitor.resource(value.resource);
        if (value.inline !== undefined)
            return visitor.inline(value.inline);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(PromptFlowNodeSourceConfiguration || (PromptFlowNodeSourceConfiguration = {}));
export var RetrievalFlowNodeServiceConfiguration;
(function (RetrievalFlowNodeServiceConfiguration) {
    RetrievalFlowNodeServiceConfiguration.visit = (value, visitor) => {
        if (value.s3 !== undefined)
            return visitor.s3(value.s3);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(RetrievalFlowNodeServiceConfiguration || (RetrievalFlowNodeServiceConfiguration = {}));
export var StorageFlowNodeServiceConfiguration;
(function (StorageFlowNodeServiceConfiguration) {
    StorageFlowNodeServiceConfiguration.visit = (value, visitor) => {
        if (value.s3 !== undefined)
            return visitor.s3(value.s3);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(StorageFlowNodeServiceConfiguration || (StorageFlowNodeServiceConfiguration = {}));
export var FlowNodeConfiguration;
(function (FlowNodeConfiguration) {
    FlowNodeConfiguration.visit = (value, visitor) => {
        if (value.input !== undefined)
            return visitor.input(value.input);
        if (value.output !== undefined)
            return visitor.output(value.output);
        if (value.knowledgeBase !== undefined)
            return visitor.knowledgeBase(value.knowledgeBase);
        if (value.condition !== undefined)
            return visitor.condition(value.condition);
        if (value.lex !== undefined)
            return visitor.lex(value.lex);
        if (value.prompt !== undefined)
            return visitor.prompt(value.prompt);
        if (value.lambdaFunction !== undefined)
            return visitor.lambdaFunction(value.lambdaFunction);
        if (value.storage !== undefined)
            return visitor.storage(value.storage);
        if (value.agent !== undefined)
            return visitor.agent(value.agent);
        if (value.retrieval !== undefined)
            return visitor.retrieval(value.retrieval);
        if (value.iterator !== undefined)
            return visitor.iterator(value.iterator);
        if (value.collector !== undefined)
            return visitor.collector(value.collector);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(FlowNodeConfiguration || (FlowNodeConfiguration = {}));
export const FlowNodeIODataType = {
    ARRAY: "Array",
    BOOLEAN: "Boolean",
    NUMBER: "Number",
    OBJECT: "Object",
    STRING: "String",
};
export const FlowNodeType = {
    AGENT: "Agent",
    COLLECTOR: "Collector",
    CONDITION: "Condition",
    INPUT: "Input",
    ITERATOR: "Iterator",
    KNOWLEDGE_BASE: "KnowledgeBase",
    LAMBDA_FUNCTION: "LambdaFunction",
    LEX: "Lex",
    OUTPUT: "Output",
    PROMPT: "Prompt",
    RETRIEVAL: "Retrieval",
    STORAGE: "Storage",
};
export const FlowStatus = {
    FAILED: "Failed",
    NOT_PREPARED: "NotPrepared",
    PREPARED: "Prepared",
    PREPARING: "Preparing",
};
export const FlowValidationSeverity = {
    ERROR: "Error",
    WARNING: "Warning",
};
export const IngestionJobStatus = {
    COMPLETE: "COMPLETE",
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
    STARTING: "STARTING",
};
export const IngestionJobFilterAttribute = {
    STATUS: "STATUS",
};
export const IngestionJobFilterOperator = {
    EQ: "EQ",
};
export const IngestionJobSortByAttribute = {
    STARTED_AT: "STARTED_AT",
    STATUS: "STATUS",
};
export const SortOrder = {
    ASCENDING: "ASCENDING",
    DESCENDING: "DESCENDING",
};
export const KnowledgeBaseType = {
    VECTOR: "VECTOR",
};
export const KnowledgeBaseStorageType = {
    MONGO_DB_ATLAS: "MONGO_DB_ATLAS",
    OPENSEARCH_SERVERLESS: "OPENSEARCH_SERVERLESS",
    PINECONE: "PINECONE",
    RDS: "RDS",
    REDIS_ENTERPRISE_CLOUD: "REDIS_ENTERPRISE_CLOUD",
};
export const KnowledgeBaseStatus = {
    ACTIVE: "ACTIVE",
    CREATING: "CREATING",
    DELETE_UNSUCCESSFUL: "DELETE_UNSUCCESSFUL",
    DELETING: "DELETING",
    FAILED: "FAILED",
    UPDATING: "UPDATING",
};
export const APISchemaFilterSensitiveLog = (obj) => {
    if (obj.s3 !== undefined)
        return { s3: obj.s3 };
    if (obj.payload !== undefined)
        return { payload: SENSITIVE_STRING };
    if (obj.$unknown !== undefined)
        return { [obj.$unknown[0]]: "UNKNOWN" };
};
export const CreateAgentActionGroupRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.actionGroupExecutor && { actionGroupExecutor: obj.actionGroupExecutor }),
    ...(obj.apiSchema && { apiSchema: APISchemaFilterSensitiveLog(obj.apiSchema) }),
    ...(obj.functionSchema && { functionSchema: obj.functionSchema }),
});
export const AgentActionGroupFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.actionGroupExecutor && { actionGroupExecutor: obj.actionGroupExecutor }),
    ...(obj.apiSchema && { apiSchema: APISchemaFilterSensitiveLog(obj.apiSchema) }),
    ...(obj.functionSchema && { functionSchema: obj.functionSchema }),
});
export const CreateAgentActionGroupResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.agentActionGroup && { agentActionGroup: AgentActionGroupFilterSensitiveLog(obj.agentActionGroup) }),
});
export const GetAgentActionGroupResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.agentActionGroup && { agentActionGroup: AgentActionGroupFilterSensitiveLog(obj.agentActionGroup) }),
});
export const UpdateAgentActionGroupRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.actionGroupExecutor && { actionGroupExecutor: obj.actionGroupExecutor }),
    ...(obj.apiSchema && { apiSchema: APISchemaFilterSensitiveLog(obj.apiSchema) }),
    ...(obj.functionSchema && { functionSchema: obj.functionSchema }),
});
export const UpdateAgentActionGroupResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.agentActionGroup && { agentActionGroup: AgentActionGroupFilterSensitiveLog(obj.agentActionGroup) }),
});
export const PromptConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.basePromptTemplate && { basePromptTemplate: SENSITIVE_STRING }),
});
export const PromptOverrideConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.promptConfigurations && {
        promptConfigurations: obj.promptConfigurations.map((item) => PromptConfigurationFilterSensitiveLog(item)),
    }),
});
export const AgentFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.instruction && { instruction: SENSITIVE_STRING }),
    ...(obj.promptOverrideConfiguration && { promptOverrideConfiguration: SENSITIVE_STRING }),
});
export const CreateAgentRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.instruction && { instruction: SENSITIVE_STRING }),
    ...(obj.promptOverrideConfiguration && { promptOverrideConfiguration: SENSITIVE_STRING }),
});
export const CreateAgentResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.agent && { agent: AgentFilterSensitiveLog(obj.agent) }),
});
export const GetAgentResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.agent && { agent: AgentFilterSensitiveLog(obj.agent) }),
});
export const UpdateAgentRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.instruction && { instruction: SENSITIVE_STRING }),
    ...(obj.promptOverrideConfiguration && { promptOverrideConfiguration: SENSITIVE_STRING }),
});
export const UpdateAgentResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.agent && { agent: AgentFilterSensitiveLog(obj.agent) }),
});
export const AgentVersionFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.instruction && { instruction: SENSITIVE_STRING }),
    ...(obj.promptOverrideConfiguration && { promptOverrideConfiguration: SENSITIVE_STRING }),
});
export const PatternObjectFilterFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.objectType && { objectType: SENSITIVE_STRING }),
    ...(obj.inclusionFilters && { inclusionFilters: SENSITIVE_STRING }),
    ...(obj.exclusionFilters && { exclusionFilters: SENSITIVE_STRING }),
});
export const PatternObjectFilterConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.filters && { filters: SENSITIVE_STRING }),
});
export const CrawlFilterConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.patternObjectFilter && {
        patternObjectFilter: PatternObjectFilterConfigurationFilterSensitiveLog(obj.patternObjectFilter),
    }),
});
export const ConfluenceCrawlerConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.filterConfiguration && {
        filterConfiguration: CrawlFilterConfigurationFilterSensitiveLog(obj.filterConfiguration),
    }),
});
export const ConfluenceDataSourceConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.crawlerConfiguration && {
        crawlerConfiguration: ConfluenceCrawlerConfigurationFilterSensitiveLog(obj.crawlerConfiguration),
    }),
});
export const S3DataSourceConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.inclusionPrefixes && { inclusionPrefixes: SENSITIVE_STRING }),
});
export const SalesforceCrawlerConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.filterConfiguration && {
        filterConfiguration: CrawlFilterConfigurationFilterSensitiveLog(obj.filterConfiguration),
    }),
});
export const SalesforceDataSourceConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.crawlerConfiguration && {
        crawlerConfiguration: SalesforceCrawlerConfigurationFilterSensitiveLog(obj.crawlerConfiguration),
    }),
});
export const SharePointCrawlerConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.filterConfiguration && {
        filterConfiguration: CrawlFilterConfigurationFilterSensitiveLog(obj.filterConfiguration),
    }),
});
export const SharePointDataSourceConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.crawlerConfiguration && {
        crawlerConfiguration: SharePointCrawlerConfigurationFilterSensitiveLog(obj.crawlerConfiguration),
    }),
});
export const WebCrawlerConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.inclusionFilters && { inclusionFilters: SENSITIVE_STRING }),
    ...(obj.exclusionFilters && { exclusionFilters: SENSITIVE_STRING }),
});
export const WebDataSourceConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.crawlerConfiguration && {
        crawlerConfiguration: WebCrawlerConfigurationFilterSensitiveLog(obj.crawlerConfiguration),
    }),
});
export const DataSourceConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.s3Configuration && { s3Configuration: S3DataSourceConfigurationFilterSensitiveLog(obj.s3Configuration) }),
    ...(obj.webConfiguration && { webConfiguration: WebDataSourceConfigurationFilterSensitiveLog(obj.webConfiguration) }),
    ...(obj.confluenceConfiguration && {
        confluenceConfiguration: ConfluenceDataSourceConfigurationFilterSensitiveLog(obj.confluenceConfiguration),
    }),
    ...(obj.salesforceConfiguration && {
        salesforceConfiguration: SalesforceDataSourceConfigurationFilterSensitiveLog(obj.salesforceConfiguration),
    }),
    ...(obj.sharePointConfiguration && {
        sharePointConfiguration: SharePointDataSourceConfigurationFilterSensitiveLog(obj.sharePointConfiguration),
    }),
});
export const CreateDataSourceRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.dataSourceConfiguration && {
        dataSourceConfiguration: DataSourceConfigurationFilterSensitiveLog(obj.dataSourceConfiguration),
    }),
});
export const DataSourceFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.dataSourceConfiguration && {
        dataSourceConfiguration: DataSourceConfigurationFilterSensitiveLog(obj.dataSourceConfiguration),
    }),
});
export const CreateDataSourceResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.dataSource && { dataSource: DataSourceFilterSensitiveLog(obj.dataSource) }),
});
export const GetDataSourceResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.dataSource && { dataSource: DataSourceFilterSensitiveLog(obj.dataSource) }),
});
export const UpdateDataSourceRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.dataSourceConfiguration && {
        dataSourceConfiguration: DataSourceConfigurationFilterSensitiveLog(obj.dataSourceConfiguration),
    }),
});
export const UpdateDataSourceResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.dataSource && { dataSource: DataSourceFilterSensitiveLog(obj.dataSource) }),
});
export const FlowConditionFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.expression && { expression: SENSITIVE_STRING }),
});
export const ConditionFlowNodeConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.conditions && { conditions: SENSITIVE_STRING }),
});
export const TextPromptTemplateConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.text && { text: SENSITIVE_STRING }),
    ...(obj.inputVariables && { inputVariables: SENSITIVE_STRING }),
});
export const PromptTemplateConfigurationFilterSensitiveLog = (obj) => {
    if (obj.text !== undefined)
        return { text: SENSITIVE_STRING };
    if (obj.$unknown !== undefined)
        return { [obj.$unknown[0]]: "UNKNOWN" };
};
export const PromptFlowNodeInlineConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.templateConfiguration && {
        templateConfiguration: PromptTemplateConfigurationFilterSensitiveLog(obj.templateConfiguration),
    }),
    ...(obj.inferenceConfiguration && { inferenceConfiguration: obj.inferenceConfiguration }),
});
export const PromptFlowNodeSourceConfigurationFilterSensitiveLog = (obj) => {
    if (obj.resource !== undefined)
        return { resource: obj.resource };
    if (obj.inline !== undefined)
        return { inline: PromptFlowNodeInlineConfigurationFilterSensitiveLog(obj.inline) };
    if (obj.$unknown !== undefined)
        return { [obj.$unknown[0]]: "UNKNOWN" };
};
export const PromptFlowNodeConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.sourceConfiguration && {
        sourceConfiguration: PromptFlowNodeSourceConfigurationFilterSensitiveLog(obj.sourceConfiguration),
    }),
});
export const FlowNodeConfigurationFilterSensitiveLog = (obj) => {
    if (obj.input !== undefined)
        return { input: obj.input };
    if (obj.output !== undefined)
        return { output: obj.output };
    if (obj.knowledgeBase !== undefined)
        return { knowledgeBase: obj.knowledgeBase };
    if (obj.condition !== undefined)
        return { condition: ConditionFlowNodeConfigurationFilterSensitiveLog(obj.condition) };
    if (obj.lex !== undefined)
        return { lex: obj.lex };
    if (obj.prompt !== undefined)
        return { prompt: PromptFlowNodeConfigurationFilterSensitiveLog(obj.prompt) };
    if (obj.lambdaFunction !== undefined)
        return { lambdaFunction: obj.lambdaFunction };
    if (obj.storage !== undefined)
        return { storage: obj.storage };
    if (obj.agent !== undefined)
        return { agent: obj.agent };
    if (obj.retrieval !== undefined)
        return { retrieval: obj.retrieval };
    if (obj.iterator !== undefined)
        return { iterator: obj.iterator };
    if (obj.collector !== undefined)
        return { collector: obj.collector };
    if (obj.$unknown !== undefined)
        return { [obj.$unknown[0]]: "UNKNOWN" };
};
export const FlowNodeInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.expression && { expression: SENSITIVE_STRING }),
});
export const FlowNodeFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.configuration && { configuration: FlowNodeConfigurationFilterSensitiveLog(obj.configuration) }),
    ...(obj.inputs && { inputs: obj.inputs.map((item) => FlowNodeInputFilterSensitiveLog(item)) }),
});
export const FlowDefinitionFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.nodes && { nodes: SENSITIVE_STRING }),
    ...(obj.connections && { connections: obj.connections.map((item) => item) }),
});
export const CreateFlowRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.definition && { definition: FlowDefinitionFilterSensitiveLog(obj.definition) }),
});
export const CreateFlowResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.definition && { definition: FlowDefinitionFilterSensitiveLog(obj.definition) }),
});
export const CreateFlowVersionResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.definition && { definition: FlowDefinitionFilterSensitiveLog(obj.definition) }),
});
export const GetFlowVersionResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.definition && { definition: FlowDefinitionFilterSensitiveLog(obj.definition) }),
});
export const GetFlowResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.definition && { definition: FlowDefinitionFilterSensitiveLog(obj.definition) }),
});
export const UpdateFlowRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.definition && { definition: FlowDefinitionFilterSensitiveLog(obj.definition) }),
});
export const UpdateFlowResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.definition && { definition: FlowDefinitionFilterSensitiveLog(obj.definition) }),
});
export const PromptVariantFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.templateConfiguration && {
        templateConfiguration: PromptTemplateConfigurationFilterSensitiveLog(obj.templateConfiguration),
    }),
    ...(obj.inferenceConfiguration && { inferenceConfiguration: obj.inferenceConfiguration }),
});
export const CreatePromptRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.variants && { variants: SENSITIVE_STRING }),
});
export const CreatePromptResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.variants && { variants: SENSITIVE_STRING }),
});
export const CreatePromptVersionResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.variants && { variants: SENSITIVE_STRING }),
});
export const GetPromptResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.variants && { variants: SENSITIVE_STRING }),
});
export const UpdatePromptRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.variants && { variants: SENSITIVE_STRING }),
});
export const UpdatePromptResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.variants && { variants: SENSITIVE_STRING }),
});
export const GetAgentVersionResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.agentVersion && { agentVersion: AgentVersionFilterSensitiveLog(obj.agentVersion) }),
});
