import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { BedrockAgentServiceException as __BaseException } from "./BedrockAgentServiceException";
export declare class AccessDeniedException extends __BaseException {
  readonly name: "AccessDeniedException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<AccessDeniedException, __BaseException>
  );
}
export declare const CustomControlMethod: {
  readonly RETURN_CONTROL: "RETURN_CONTROL";
};
export type CustomControlMethod =
  (typeof CustomControlMethod)[keyof typeof CustomControlMethod];
export type ActionGroupExecutor =
  | ActionGroupExecutor.CustomControlMember
  | ActionGroupExecutor.LambdaMember
  | ActionGroupExecutor.$UnknownMember;
export declare namespace ActionGroupExecutor {
  interface LambdaMember {
    lambda: string;
    customControl?: never;
    $unknown?: never;
  }
  interface CustomControlMember {
    lambda?: never;
    customControl: CustomControlMethod;
    $unknown?: never;
  }
  interface $UnknownMember {
    lambda?: never;
    customControl?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    lambda: (value: string) => T;
    customControl: (value: CustomControlMethod) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: ActionGroupExecutor, visitor: Visitor<T>) => T;
}
export declare class ConflictException extends __BaseException {
  readonly name: "ConflictException";
  readonly $fault: "client";
  constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
}
export declare const ActionGroupState: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type ActionGroupState =
  (typeof ActionGroupState)[keyof typeof ActionGroupState];
export interface S3Identifier {
  s3BucketName?: string;
  s3ObjectKey?: string;
}
export type APISchema =
  | APISchema.PayloadMember
  | APISchema.S3Member
  | APISchema.$UnknownMember;
export declare namespace APISchema {
  interface S3Member {
    s3: S3Identifier;
    payload?: never;
    $unknown?: never;
  }
  interface PayloadMember {
    s3?: never;
    payload: string;
    $unknown?: never;
  }
  interface $UnknownMember {
    s3?: never;
    payload?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    s3: (value: S3Identifier) => T;
    payload: (value: string) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: APISchema, visitor: Visitor<T>) => T;
}
export declare const Type: {
  readonly ARRAY: "array";
  readonly BOOLEAN: "boolean";
  readonly INTEGER: "integer";
  readonly NUMBER: "number";
  readonly STRING: "string";
};
export type Type = (typeof Type)[keyof typeof Type];
export interface ParameterDetail {
  description?: string;
  type: Type | undefined;
  required?: boolean;
}
export interface Function {
  name: string | undefined;
  description?: string;
  parameters?: Record<string, ParameterDetail>;
}
export type FunctionSchema =
  | FunctionSchema.FunctionsMember
  | FunctionSchema.$UnknownMember;
export declare namespace FunctionSchema {
  interface FunctionsMember {
    functions: Function[];
    $unknown?: never;
  }
  interface $UnknownMember {
    functions?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    functions: (value: Function[]) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: FunctionSchema, visitor: Visitor<T>) => T;
}
export declare const ActionGroupSignature: {
  readonly AMAZON_CODEINTERPRETER: "AMAZON.CodeInterpreter";
  readonly AMAZON_USERINPUT: "AMAZON.UserInput";
};
export type ActionGroupSignature =
  (typeof ActionGroupSignature)[keyof typeof ActionGroupSignature];
export interface CreateAgentActionGroupRequest {
  agentId: string | undefined;
  agentVersion: string | undefined;
  actionGroupName: string | undefined;
  clientToken?: string;
  description?: string;
  parentActionGroupSignature?: ActionGroupSignature;
  actionGroupExecutor?: ActionGroupExecutor;
  apiSchema?: APISchema;
  actionGroupState?: ActionGroupState;
  functionSchema?: FunctionSchema;
}
export interface AgentActionGroup {
  agentId: string | undefined;
  agentVersion: string | undefined;
  actionGroupId: string | undefined;
  actionGroupName: string | undefined;
  clientToken?: string;
  description?: string;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
  parentActionSignature?: ActionGroupSignature;
  actionGroupExecutor?: ActionGroupExecutor;
  apiSchema?: APISchema;
  functionSchema?: FunctionSchema;
  actionGroupState: ActionGroupState | undefined;
}
export interface CreateAgentActionGroupResponse {
  agentActionGroup: AgentActionGroup | undefined;
}
export declare class InternalServerException extends __BaseException {
  readonly name: "InternalServerException";
  readonly $fault: "server";
  constructor(
    opts: __ExceptionOptionType<InternalServerException, __BaseException>
  );
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export declare class ServiceQuotaExceededException extends __BaseException {
  readonly name: "ServiceQuotaExceededException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ServiceQuotaExceededException, __BaseException>
  );
}
export declare class ThrottlingException extends __BaseException {
  readonly name: "ThrottlingException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ThrottlingException, __BaseException>
  );
}
export interface ValidationExceptionField {
  name: string | undefined;
  message: string | undefined;
}
export declare class ValidationException extends __BaseException {
  readonly name: "ValidationException";
  readonly $fault: "client";
  fieldList?: ValidationExceptionField[];
  constructor(
    opts: __ExceptionOptionType<ValidationException, __BaseException>
  );
}
export interface DeleteAgentActionGroupRequest {
  agentId: string | undefined;
  agentVersion: string | undefined;
  actionGroupId: string | undefined;
  skipResourceInUseCheck?: boolean;
}
export interface DeleteAgentActionGroupResponse {}
export interface GetAgentActionGroupRequest {
  agentId: string | undefined;
  agentVersion: string | undefined;
  actionGroupId: string | undefined;
}
export interface GetAgentActionGroupResponse {
  agentActionGroup: AgentActionGroup | undefined;
}
export interface ListAgentActionGroupsRequest {
  agentId: string | undefined;
  agentVersion: string | undefined;
  maxResults?: number;
  nextToken?: string;
}
export interface ActionGroupSummary {
  actionGroupId: string | undefined;
  actionGroupName: string | undefined;
  actionGroupState: ActionGroupState | undefined;
  description?: string;
  updatedAt: Date | undefined;
}
export interface ListAgentActionGroupsResponse {
  actionGroupSummaries: ActionGroupSummary[] | undefined;
  nextToken?: string;
}
export interface UpdateAgentActionGroupRequest {
  agentId: string | undefined;
  agentVersion: string | undefined;
  actionGroupId: string | undefined;
  actionGroupName: string | undefined;
  description?: string;
  parentActionGroupSignature?: ActionGroupSignature;
  actionGroupExecutor?: ActionGroupExecutor;
  actionGroupState?: ActionGroupState;
  apiSchema?: APISchema;
  functionSchema?: FunctionSchema;
}
export interface UpdateAgentActionGroupResponse {
  agentActionGroup: AgentActionGroup | undefined;
}
export declare const AgentStatus: {
  readonly CREATING: "CREATING";
  readonly DELETING: "DELETING";
  readonly FAILED: "FAILED";
  readonly NOT_PREPARED: "NOT_PREPARED";
  readonly PREPARED: "PREPARED";
  readonly PREPARING: "PREPARING";
  readonly UPDATING: "UPDATING";
  readonly VERSIONING: "VERSIONING";
};
export type AgentStatus = (typeof AgentStatus)[keyof typeof AgentStatus];
export interface GuardrailConfiguration {
  guardrailIdentifier?: string;
  guardrailVersion?: string;
}
export declare const MemoryType: {
  readonly SESSION_SUMMARY: "SESSION_SUMMARY";
};
export type MemoryType = (typeof MemoryType)[keyof typeof MemoryType];
export interface MemoryConfiguration {
  enabledMemoryTypes: MemoryType[] | undefined;
  storageDays?: number;
}
export interface InferenceConfiguration {
  temperature?: number;
  topP?: number;
  topK?: number;
  maximumLength?: number;
  stopSequences?: string[];
}
export declare const CreationMode: {
  readonly DEFAULT: "DEFAULT";
  readonly OVERRIDDEN: "OVERRIDDEN";
};
export type CreationMode = (typeof CreationMode)[keyof typeof CreationMode];
export declare const PromptState: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type PromptState = (typeof PromptState)[keyof typeof PromptState];
export declare const PromptType: {
  readonly KNOWLEDGE_BASE_RESPONSE_GENERATION: "KNOWLEDGE_BASE_RESPONSE_GENERATION";
  readonly ORCHESTRATION: "ORCHESTRATION";
  readonly POST_PROCESSING: "POST_PROCESSING";
  readonly PRE_PROCESSING: "PRE_PROCESSING";
};
export type PromptType = (typeof PromptType)[keyof typeof PromptType];
export interface PromptConfiguration {
  promptType?: PromptType;
  promptCreationMode?: CreationMode;
  promptState?: PromptState;
  basePromptTemplate?: string;
  inferenceConfiguration?: InferenceConfiguration;
  parserMode?: CreationMode;
}
export interface PromptOverrideConfiguration {
  promptConfigurations: PromptConfiguration[] | undefined;
  overrideLambda?: string;
}
export interface Agent {
  agentId: string | undefined;
  agentName: string | undefined;
  agentArn: string | undefined;
  agentVersion: string | undefined;
  clientToken?: string;
  instruction?: string;
  agentStatus: AgentStatus | undefined;
  foundationModel?: string;
  description?: string;
  idleSessionTTLInSeconds: number | undefined;
  agentResourceRoleArn: string | undefined;
  customerEncryptionKeyArn?: string;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
  preparedAt?: Date;
  failureReasons?: string[];
  recommendedActions?: string[];
  promptOverrideConfiguration?: PromptOverrideConfiguration;
  guardrailConfiguration?: GuardrailConfiguration;
  memoryConfiguration?: MemoryConfiguration;
}
export interface AgentAliasRoutingConfigurationListItem {
  agentVersion?: string;
  provisionedThroughput?: string;
}
export interface AgentAliasHistoryEvent {
  routingConfiguration?: AgentAliasRoutingConfigurationListItem[];
  endDate?: Date;
  startDate?: Date;
}
export declare const AgentAliasStatus: {
  readonly CREATING: "CREATING";
  readonly DELETING: "DELETING";
  readonly FAILED: "FAILED";
  readonly PREPARED: "PREPARED";
  readonly UPDATING: "UPDATING";
};
export type AgentAliasStatus =
  (typeof AgentAliasStatus)[keyof typeof AgentAliasStatus];
export interface AgentAlias {
  agentId: string | undefined;
  agentAliasId: string | undefined;
  agentAliasName: string | undefined;
  agentAliasArn: string | undefined;
  clientToken?: string;
  description?: string;
  routingConfiguration: AgentAliasRoutingConfigurationListItem[] | undefined;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
  agentAliasHistoryEvents?: AgentAliasHistoryEvent[];
  agentAliasStatus: AgentAliasStatus | undefined;
  failureReasons?: string[];
}
export interface AgentAliasSummary {
  agentAliasId: string | undefined;
  agentAliasName: string | undefined;
  description?: string;
  routingConfiguration?: AgentAliasRoutingConfigurationListItem[];
  agentAliasStatus: AgentAliasStatus | undefined;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
}
export interface AgentFlowNodeConfiguration {
  agentAliasArn: string | undefined;
}
export declare const KnowledgeBaseState: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type KnowledgeBaseState =
  (typeof KnowledgeBaseState)[keyof typeof KnowledgeBaseState];
export interface AgentKnowledgeBase {
  agentId: string | undefined;
  agentVersion: string | undefined;
  knowledgeBaseId: string | undefined;
  description: string | undefined;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
  knowledgeBaseState: KnowledgeBaseState | undefined;
}
export interface AgentKnowledgeBaseSummary {
  knowledgeBaseId: string | undefined;
  description?: string;
  knowledgeBaseState: KnowledgeBaseState | undefined;
  updatedAt: Date | undefined;
}
export interface CreateAgentRequest {
  agentName: string | undefined;
  clientToken?: string;
  instruction?: string;
  foundationModel?: string;
  description?: string;
  idleSessionTTLInSeconds?: number;
  agentResourceRoleArn?: string;
  customerEncryptionKeyArn?: string;
  tags?: Record<string, string>;
  promptOverrideConfiguration?: PromptOverrideConfiguration;
  guardrailConfiguration?: GuardrailConfiguration;
  memoryConfiguration?: MemoryConfiguration;
}
export interface CreateAgentResponse {
  agent: Agent | undefined;
}
export interface DeleteAgentRequest {
  agentId: string | undefined;
  skipResourceInUseCheck?: boolean;
}
export interface DeleteAgentResponse {
  agentId: string | undefined;
  agentStatus: AgentStatus | undefined;
}
export interface GetAgentRequest {
  agentId: string | undefined;
}
export interface GetAgentResponse {
  agent: Agent | undefined;
}
export interface ListAgentsRequest {
  maxResults?: number;
  nextToken?: string;
}
export interface AgentSummary {
  agentId: string | undefined;
  agentName: string | undefined;
  agentStatus: AgentStatus | undefined;
  description?: string;
  updatedAt: Date | undefined;
  latestAgentVersion?: string;
  guardrailConfiguration?: GuardrailConfiguration;
}
export interface ListAgentsResponse {
  agentSummaries: AgentSummary[] | undefined;
  nextToken?: string;
}
export interface PrepareAgentRequest {
  agentId: string | undefined;
}
export interface PrepareAgentResponse {
  agentId: string | undefined;
  agentStatus: AgentStatus | undefined;
  agentVersion: string | undefined;
  preparedAt: Date | undefined;
}
export interface UpdateAgentRequest {
  agentId: string | undefined;
  agentName: string | undefined;
  instruction?: string;
  foundationModel: string | undefined;
  description?: string;
  idleSessionTTLInSeconds?: number;
  agentResourceRoleArn: string | undefined;
  customerEncryptionKeyArn?: string;
  promptOverrideConfiguration?: PromptOverrideConfiguration;
  guardrailConfiguration?: GuardrailConfiguration;
  memoryConfiguration?: MemoryConfiguration;
}
export interface UpdateAgentResponse {
  agent: Agent | undefined;
}
export interface AgentVersion {
  agentId: string | undefined;
  agentName: string | undefined;
  agentArn: string | undefined;
  version: string | undefined;
  instruction?: string;
  agentStatus: AgentStatus | undefined;
  foundationModel?: string;
  description?: string;
  idleSessionTTLInSeconds: number | undefined;
  agentResourceRoleArn: string | undefined;
  customerEncryptionKeyArn?: string;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
  failureReasons?: string[];
  recommendedActions?: string[];
  promptOverrideConfiguration?: PromptOverrideConfiguration;
  guardrailConfiguration?: GuardrailConfiguration;
  memoryConfiguration?: MemoryConfiguration;
}
export interface AgentVersionSummary {
  agentName: string | undefined;
  agentStatus: AgentStatus | undefined;
  agentVersion: string | undefined;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
  description?: string;
  guardrailConfiguration?: GuardrailConfiguration;
}
export interface CreateAgentAliasRequest {
  agentId: string | undefined;
  agentAliasName: string | undefined;
  clientToken?: string;
  description?: string;
  routingConfiguration?: AgentAliasRoutingConfigurationListItem[];
  tags?: Record<string, string>;
}
export interface CreateAgentAliasResponse {
  agentAlias: AgentAlias | undefined;
}
export interface DeleteAgentAliasRequest {
  agentId: string | undefined;
  agentAliasId: string | undefined;
}
export interface DeleteAgentAliasResponse {
  agentId: string | undefined;
  agentAliasId: string | undefined;
  agentAliasStatus: AgentAliasStatus | undefined;
}
export interface GetAgentAliasRequest {
  agentId: string | undefined;
  agentAliasId: string | undefined;
}
export interface GetAgentAliasResponse {
  agentAlias: AgentAlias | undefined;
}
export interface ListAgentAliasesRequest {
  agentId: string | undefined;
  maxResults?: number;
  nextToken?: string;
}
export interface ListAgentAliasesResponse {
  agentAliasSummaries: AgentAliasSummary[] | undefined;
  nextToken?: string;
}
export interface UpdateAgentAliasRequest {
  agentId: string | undefined;
  agentAliasId: string | undefined;
  agentAliasName: string | undefined;
  description?: string;
  routingConfiguration?: AgentAliasRoutingConfigurationListItem[];
}
export interface UpdateAgentAliasResponse {
  agentAlias: AgentAlias | undefined;
}
export declare const DataDeletionPolicy: {
  readonly DELETE: "DELETE";
  readonly RETAIN: "RETAIN";
};
export type DataDeletionPolicy =
  (typeof DataDeletionPolicy)[keyof typeof DataDeletionPolicy];
export interface PatternObjectFilter {
  objectType: string | undefined;
  inclusionFilters?: string[];
  exclusionFilters?: string[];
}
export interface PatternObjectFilterConfiguration {
  filters: PatternObjectFilter[] | undefined;
}
export declare const CrawlFilterConfigurationType: {
  readonly PATTERN: "PATTERN";
};
export type CrawlFilterConfigurationType =
  (typeof CrawlFilterConfigurationType)[keyof typeof CrawlFilterConfigurationType];
export interface CrawlFilterConfiguration {
  type: CrawlFilterConfigurationType | undefined;
  patternObjectFilter?: PatternObjectFilterConfiguration;
}
export interface ConfluenceCrawlerConfiguration {
  filterConfiguration?: CrawlFilterConfiguration;
}
export declare const ConfluenceAuthType: {
  readonly BASIC: "BASIC";
  readonly OAUTH2_CLIENT_CREDENTIALS: "OAUTH2_CLIENT_CREDENTIALS";
};
export type ConfluenceAuthType =
  (typeof ConfluenceAuthType)[keyof typeof ConfluenceAuthType];
export declare const ConfluenceHostType: {
  readonly SAAS: "SAAS";
};
export type ConfluenceHostType =
  (typeof ConfluenceHostType)[keyof typeof ConfluenceHostType];
export interface ConfluenceSourceConfiguration {
  hostUrl: string | undefined;
  hostType: ConfluenceHostType | undefined;
  authType: ConfluenceAuthType | undefined;
  credentialsSecretArn: string | undefined;
}
export interface ConfluenceDataSourceConfiguration {
  sourceConfiguration: ConfluenceSourceConfiguration | undefined;
  crawlerConfiguration?: ConfluenceCrawlerConfiguration;
}
export interface S3DataSourceConfiguration {
  bucketArn: string | undefined;
  inclusionPrefixes?: string[];
  bucketOwnerAccountId?: string;
}
export interface SalesforceCrawlerConfiguration {
  filterConfiguration?: CrawlFilterConfiguration;
}
export declare const SalesforceAuthType: {
  readonly OAUTH2_CLIENT_CREDENTIALS: "OAUTH2_CLIENT_CREDENTIALS";
};
export type SalesforceAuthType =
  (typeof SalesforceAuthType)[keyof typeof SalesforceAuthType];
export interface SalesforceSourceConfiguration {
  hostUrl: string | undefined;
  authType: SalesforceAuthType | undefined;
  credentialsSecretArn: string | undefined;
}
export interface SalesforceDataSourceConfiguration {
  sourceConfiguration: SalesforceSourceConfiguration | undefined;
  crawlerConfiguration?: SalesforceCrawlerConfiguration;
}
export interface SharePointCrawlerConfiguration {
  filterConfiguration?: CrawlFilterConfiguration;
}
export declare const SharePointAuthType: {
  readonly OAUTH2_CLIENT_CREDENTIALS: "OAUTH2_CLIENT_CREDENTIALS";
};
export type SharePointAuthType =
  (typeof SharePointAuthType)[keyof typeof SharePointAuthType];
export declare const SharePointHostType: {
  readonly ONLINE: "ONLINE";
};
export type SharePointHostType =
  (typeof SharePointHostType)[keyof typeof SharePointHostType];
export interface SharePointSourceConfiguration {
  tenantId?: string;
  domain: string | undefined;
  siteUrls: string[] | undefined;
  hostType: SharePointHostType | undefined;
  authType: SharePointAuthType | undefined;
  credentialsSecretArn: string | undefined;
}
export interface SharePointDataSourceConfiguration {
  sourceConfiguration: SharePointSourceConfiguration | undefined;
  crawlerConfiguration?: SharePointCrawlerConfiguration;
}
export declare const DataSourceType: {
  readonly CONFLUENCE: "CONFLUENCE";
  readonly S3: "S3";
  readonly SALESFORCE: "SALESFORCE";
  readonly SHAREPOINT: "SHAREPOINT";
  readonly WEB: "WEB";
};
export type DataSourceType =
  (typeof DataSourceType)[keyof typeof DataSourceType];
export interface WebCrawlerLimits {
  rateLimit?: number;
}
export declare const WebScopeType: {
  readonly HOST_ONLY: "HOST_ONLY";
  readonly SUBDOMAINS: "SUBDOMAINS";
};
export type WebScopeType = (typeof WebScopeType)[keyof typeof WebScopeType];
export interface WebCrawlerConfiguration {
  crawlerLimits?: WebCrawlerLimits;
  inclusionFilters?: string[];
  exclusionFilters?: string[];
  scope?: WebScopeType;
}
export interface SeedUrl {
  url?: string;
}
export interface UrlConfiguration {
  seedUrls?: SeedUrl[];
}
export interface WebSourceConfiguration {
  urlConfiguration: UrlConfiguration | undefined;
}
export interface WebDataSourceConfiguration {
  sourceConfiguration: WebSourceConfiguration | undefined;
  crawlerConfiguration?: WebCrawlerConfiguration;
}
export interface DataSourceConfiguration {
  type: DataSourceType | undefined;
  s3Configuration?: S3DataSourceConfiguration;
  webConfiguration?: WebDataSourceConfiguration;
  confluenceConfiguration?: ConfluenceDataSourceConfiguration;
  salesforceConfiguration?: SalesforceDataSourceConfiguration;
  sharePointConfiguration?: SharePointDataSourceConfiguration;
}
export interface ServerSideEncryptionConfiguration {
  kmsKeyArn?: string;
}
export declare const ChunkingStrategy: {
  readonly FIXED_SIZE: "FIXED_SIZE";
  readonly HIERARCHICAL: "HIERARCHICAL";
  readonly NONE: "NONE";
  readonly SEMANTIC: "SEMANTIC";
};
export type ChunkingStrategy =
  (typeof ChunkingStrategy)[keyof typeof ChunkingStrategy];
export interface FixedSizeChunkingConfiguration {
  maxTokens: number | undefined;
  overlapPercentage: number | undefined;
}
export interface HierarchicalChunkingLevelConfiguration {
  maxTokens: number | undefined;
}
export interface HierarchicalChunkingConfiguration {
  levelConfigurations: HierarchicalChunkingLevelConfiguration[] | undefined;
  overlapTokens: number | undefined;
}
export interface SemanticChunkingConfiguration {
  maxTokens: number | undefined;
  bufferSize: number | undefined;
  breakpointPercentileThreshold: number | undefined;
}
export interface ChunkingConfiguration {
  chunkingStrategy: ChunkingStrategy | undefined;
  fixedSizeChunkingConfiguration?: FixedSizeChunkingConfiguration;
  hierarchicalChunkingConfiguration?: HierarchicalChunkingConfiguration;
  semanticChunkingConfiguration?: SemanticChunkingConfiguration;
}
export interface S3Location {
  uri: string | undefined;
}
export interface IntermediateStorage {
  s3Location: S3Location | undefined;
}
export declare const StepType: {
  readonly POST_CHUNKING: "POST_CHUNKING";
};
export type StepType = (typeof StepType)[keyof typeof StepType];
export interface TransformationLambdaConfiguration {
  lambdaArn: string | undefined;
}
export interface TransformationFunction {
  transformationLambdaConfiguration:
    | TransformationLambdaConfiguration
    | undefined;
}
export interface Transformation {
  transformationFunction: TransformationFunction | undefined;
  stepToApply: StepType | undefined;
}
export interface CustomTransformationConfiguration {
  intermediateStorage: IntermediateStorage | undefined;
  transformations: Transformation[] | undefined;
}
export interface ParsingPrompt {
  parsingPromptText: string | undefined;
}
export interface BedrockFoundationModelConfiguration {
  modelArn: string | undefined;
  parsingPrompt?: ParsingPrompt;
}
export declare const ParsingStrategy: {
  readonly BEDROCK_FOUNDATION_MODEL: "BEDROCK_FOUNDATION_MODEL";
};
export type ParsingStrategy =
  (typeof ParsingStrategy)[keyof typeof ParsingStrategy];
export interface ParsingConfiguration {
  parsingStrategy: ParsingStrategy | undefined;
  bedrockFoundationModelConfiguration?: BedrockFoundationModelConfiguration;
}
export interface VectorIngestionConfiguration {
  chunkingConfiguration?: ChunkingConfiguration;
  customTransformationConfiguration?: CustomTransformationConfiguration;
  parsingConfiguration?: ParsingConfiguration;
}
export interface CreateDataSourceRequest {
  knowledgeBaseId: string | undefined;
  clientToken?: string;
  name: string | undefined;
  description?: string;
  dataSourceConfiguration: DataSourceConfiguration | undefined;
  dataDeletionPolicy?: DataDeletionPolicy;
  serverSideEncryptionConfiguration?: ServerSideEncryptionConfiguration;
  vectorIngestionConfiguration?: VectorIngestionConfiguration;
}
export declare const DataSourceStatus: {
  readonly AVAILABLE: "AVAILABLE";
  readonly DELETE_UNSUCCESSFUL: "DELETE_UNSUCCESSFUL";
  readonly DELETING: "DELETING";
};
export type DataSourceStatus =
  (typeof DataSourceStatus)[keyof typeof DataSourceStatus];
export interface DataSource {
  knowledgeBaseId: string | undefined;
  dataSourceId: string | undefined;
  name: string | undefined;
  status: DataSourceStatus | undefined;
  description?: string;
  dataSourceConfiguration: DataSourceConfiguration | undefined;
  serverSideEncryptionConfiguration?: ServerSideEncryptionConfiguration;
  vectorIngestionConfiguration?: VectorIngestionConfiguration;
  dataDeletionPolicy?: DataDeletionPolicy;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
  failureReasons?: string[];
}
export interface CreateDataSourceResponse {
  dataSource: DataSource | undefined;
}
export interface DeleteDataSourceRequest {
  knowledgeBaseId: string | undefined;
  dataSourceId: string | undefined;
}
export interface DeleteDataSourceResponse {
  knowledgeBaseId: string | undefined;
  dataSourceId: string | undefined;
  status: DataSourceStatus | undefined;
}
export interface GetDataSourceRequest {
  knowledgeBaseId: string | undefined;
  dataSourceId: string | undefined;
}
export interface GetDataSourceResponse {
  dataSource: DataSource | undefined;
}
export interface ListDataSourcesRequest {
  knowledgeBaseId: string | undefined;
  maxResults?: number;
  nextToken?: string;
}
export interface DataSourceSummary {
  knowledgeBaseId: string | undefined;
  dataSourceId: string | undefined;
  name: string | undefined;
  status: DataSourceStatus | undefined;
  description?: string;
  updatedAt: Date | undefined;
}
export interface ListDataSourcesResponse {
  dataSourceSummaries: DataSourceSummary[] | undefined;
  nextToken?: string;
}
export interface UpdateDataSourceRequest {
  knowledgeBaseId: string | undefined;
  dataSourceId: string | undefined;
  name: string | undefined;
  description?: string;
  dataSourceConfiguration: DataSourceConfiguration | undefined;
  dataDeletionPolicy?: DataDeletionPolicy;
  serverSideEncryptionConfiguration?: ServerSideEncryptionConfiguration;
  vectorIngestionConfiguration?: VectorIngestionConfiguration;
}
export interface UpdateDataSourceResponse {
  dataSource: DataSource | undefined;
}
export interface FlowConditionalConnectionConfiguration {
  condition: string | undefined;
}
export interface FlowDataConnectionConfiguration {
  sourceOutput: string | undefined;
  targetInput: string | undefined;
}
export type FlowConnectionConfiguration =
  | FlowConnectionConfiguration.ConditionalMember
  | FlowConnectionConfiguration.DataMember
  | FlowConnectionConfiguration.$UnknownMember;
export declare namespace FlowConnectionConfiguration {
  interface DataMember {
    data: FlowDataConnectionConfiguration;
    conditional?: never;
    $unknown?: never;
  }
  interface ConditionalMember {
    data?: never;
    conditional: FlowConditionalConnectionConfiguration;
    $unknown?: never;
  }
  interface $UnknownMember {
    data?: never;
    conditional?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    data: (value: FlowDataConnectionConfiguration) => T;
    conditional: (value: FlowConditionalConnectionConfiguration) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(
    value: FlowConnectionConfiguration,
    visitor: Visitor<T>
  ) => T;
}
export declare const FlowConnectionType: {
  readonly CONDITIONAL: "Conditional";
  readonly DATA: "Data";
};
export type FlowConnectionType =
  (typeof FlowConnectionType)[keyof typeof FlowConnectionType];
export interface FlowConnection {
  type: FlowConnectionType | undefined;
  name: string | undefined;
  source: string | undefined;
  target: string | undefined;
  configuration?: FlowConnectionConfiguration;
}
export interface CollectorFlowNodeConfiguration {}
export interface FlowCondition {
  name: string | undefined;
  expression?: string;
}
export interface ConditionFlowNodeConfiguration {
  conditions: FlowCondition[] | undefined;
}
export interface InputFlowNodeConfiguration {}
export interface IteratorFlowNodeConfiguration {}
export interface KnowledgeBaseFlowNodeConfiguration {
  knowledgeBaseId: string | undefined;
  modelId?: string;
}
export interface LambdaFunctionFlowNodeConfiguration {
  lambdaArn: string | undefined;
}
export interface LexFlowNodeConfiguration {
  botAliasArn: string | undefined;
  localeId: string | undefined;
}
export interface OutputFlowNodeConfiguration {}
export interface PromptModelInferenceConfiguration {
  temperature?: number;
  topP?: number;
  topK?: number;
  maxTokens?: number;
  stopSequences?: string[];
}
export type PromptInferenceConfiguration =
  | PromptInferenceConfiguration.TextMember
  | PromptInferenceConfiguration.$UnknownMember;
export declare namespace PromptInferenceConfiguration {
  interface TextMember {
    text: PromptModelInferenceConfiguration;
    $unknown?: never;
  }
  interface $UnknownMember {
    text?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    text: (value: PromptModelInferenceConfiguration) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(
    value: PromptInferenceConfiguration,
    visitor: Visitor<T>
  ) => T;
}
export interface PromptInputVariable {
  name?: string;
}
export interface TextPromptTemplateConfiguration {
  text: string | undefined;
  inputVariables?: PromptInputVariable[];
}
export type PromptTemplateConfiguration =
  | PromptTemplateConfiguration.TextMember
  | PromptTemplateConfiguration.$UnknownMember;
export declare namespace PromptTemplateConfiguration {
  interface TextMember {
    text: TextPromptTemplateConfiguration;
    $unknown?: never;
  }
  interface $UnknownMember {
    text?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    text: (value: TextPromptTemplateConfiguration) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(
    value: PromptTemplateConfiguration,
    visitor: Visitor<T>
  ) => T;
}
export declare const PromptTemplateType: {
  readonly TEXT: "TEXT";
};
export type PromptTemplateType =
  (typeof PromptTemplateType)[keyof typeof PromptTemplateType];
export interface PromptFlowNodeInlineConfiguration {
  templateType: PromptTemplateType | undefined;
  templateConfiguration: PromptTemplateConfiguration | undefined;
  modelId: string | undefined;
  inferenceConfiguration?: PromptInferenceConfiguration;
}
export interface PromptFlowNodeResourceConfiguration {
  promptArn: string | undefined;
}
export type PromptFlowNodeSourceConfiguration =
  | PromptFlowNodeSourceConfiguration.InlineMember
  | PromptFlowNodeSourceConfiguration.ResourceMember
  | PromptFlowNodeSourceConfiguration.$UnknownMember;
export declare namespace PromptFlowNodeSourceConfiguration {
  interface ResourceMember {
    resource: PromptFlowNodeResourceConfiguration;
    inline?: never;
    $unknown?: never;
  }
  interface InlineMember {
    resource?: never;
    inline: PromptFlowNodeInlineConfiguration;
    $unknown?: never;
  }
  interface $UnknownMember {
    resource?: never;
    inline?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    resource: (value: PromptFlowNodeResourceConfiguration) => T;
    inline: (value: PromptFlowNodeInlineConfiguration) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(
    value: PromptFlowNodeSourceConfiguration,
    visitor: Visitor<T>
  ) => T;
}
export interface PromptFlowNodeConfiguration {
  sourceConfiguration: PromptFlowNodeSourceConfiguration | undefined;
}
export interface RetrievalFlowNodeS3Configuration {
  bucketName: string | undefined;
}
export type RetrievalFlowNodeServiceConfiguration =
  | RetrievalFlowNodeServiceConfiguration.S3Member
  | RetrievalFlowNodeServiceConfiguration.$UnknownMember;
export declare namespace RetrievalFlowNodeServiceConfiguration {
  interface S3Member {
    s3: RetrievalFlowNodeS3Configuration;
    $unknown?: never;
  }
  interface $UnknownMember {
    s3?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    s3: (value: RetrievalFlowNodeS3Configuration) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(
    value: RetrievalFlowNodeServiceConfiguration,
    visitor: Visitor<T>
  ) => T;
}
export interface RetrievalFlowNodeConfiguration {
  serviceConfiguration: RetrievalFlowNodeServiceConfiguration | undefined;
}
export interface StorageFlowNodeS3Configuration {
  bucketName: string | undefined;
}
export type StorageFlowNodeServiceConfiguration =
  | StorageFlowNodeServiceConfiguration.S3Member
  | StorageFlowNodeServiceConfiguration.$UnknownMember;
export declare namespace StorageFlowNodeServiceConfiguration {
  interface S3Member {
    s3: StorageFlowNodeS3Configuration;
    $unknown?: never;
  }
  interface $UnknownMember {
    s3?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    s3: (value: StorageFlowNodeS3Configuration) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(
    value: StorageFlowNodeServiceConfiguration,
    visitor: Visitor<T>
  ) => T;
}
export interface StorageFlowNodeConfiguration {
  serviceConfiguration: StorageFlowNodeServiceConfiguration | undefined;
}
export type FlowNodeConfiguration =
  | FlowNodeConfiguration.AgentMember
  | FlowNodeConfiguration.CollectorMember
  | FlowNodeConfiguration.ConditionMember
  | FlowNodeConfiguration.InputMember
  | FlowNodeConfiguration.IteratorMember
  | FlowNodeConfiguration.KnowledgeBaseMember
  | FlowNodeConfiguration.LambdaFunctionMember
  | FlowNodeConfiguration.LexMember
  | FlowNodeConfiguration.OutputMember
  | FlowNodeConfiguration.PromptMember
  | FlowNodeConfiguration.RetrievalMember
  | FlowNodeConfiguration.StorageMember
  | FlowNodeConfiguration.$UnknownMember;
export declare namespace FlowNodeConfiguration {
  interface InputMember {
    input: InputFlowNodeConfiguration;
    output?: never;
    knowledgeBase?: never;
    condition?: never;
    lex?: never;
    prompt?: never;
    lambdaFunction?: never;
    storage?: never;
    agent?: never;
    retrieval?: never;
    iterator?: never;
    collector?: never;
    $unknown?: never;
  }
  interface OutputMember {
    input?: never;
    output: OutputFlowNodeConfiguration;
    knowledgeBase?: never;
    condition?: never;
    lex?: never;
    prompt?: never;
    lambdaFunction?: never;
    storage?: never;
    agent?: never;
    retrieval?: never;
    iterator?: never;
    collector?: never;
    $unknown?: never;
  }
  interface KnowledgeBaseMember {
    input?: never;
    output?: never;
    knowledgeBase: KnowledgeBaseFlowNodeConfiguration;
    condition?: never;
    lex?: never;
    prompt?: never;
    lambdaFunction?: never;
    storage?: never;
    agent?: never;
    retrieval?: never;
    iterator?: never;
    collector?: never;
    $unknown?: never;
  }
  interface ConditionMember {
    input?: never;
    output?: never;
    knowledgeBase?: never;
    condition: ConditionFlowNodeConfiguration;
    lex?: never;
    prompt?: never;
    lambdaFunction?: never;
    storage?: never;
    agent?: never;
    retrieval?: never;
    iterator?: never;
    collector?: never;
    $unknown?: never;
  }
  interface LexMember {
    input?: never;
    output?: never;
    knowledgeBase?: never;
    condition?: never;
    lex: LexFlowNodeConfiguration;
    prompt?: never;
    lambdaFunction?: never;
    storage?: never;
    agent?: never;
    retrieval?: never;
    iterator?: never;
    collector?: never;
    $unknown?: never;
  }
  interface PromptMember {
    input?: never;
    output?: never;
    knowledgeBase?: never;
    condition?: never;
    lex?: never;
    prompt: PromptFlowNodeConfiguration;
    lambdaFunction?: never;
    storage?: never;
    agent?: never;
    retrieval?: never;
    iterator?: never;
    collector?: never;
    $unknown?: never;
  }
  interface LambdaFunctionMember {
    input?: never;
    output?: never;
    knowledgeBase?: never;
    condition?: never;
    lex?: never;
    prompt?: never;
    lambdaFunction: LambdaFunctionFlowNodeConfiguration;
    storage?: never;
    agent?: never;
    retrieval?: never;
    iterator?: never;
    collector?: never;
    $unknown?: never;
  }
  interface StorageMember {
    input?: never;
    output?: never;
    knowledgeBase?: never;
    condition?: never;
    lex?: never;
    prompt?: never;
    lambdaFunction?: never;
    storage: StorageFlowNodeConfiguration;
    agent?: never;
    retrieval?: never;
    iterator?: never;
    collector?: never;
    $unknown?: never;
  }
  interface AgentMember {
    input?: never;
    output?: never;
    knowledgeBase?: never;
    condition?: never;
    lex?: never;
    prompt?: never;
    lambdaFunction?: never;
    storage?: never;
    agent: AgentFlowNodeConfiguration;
    retrieval?: never;
    iterator?: never;
    collector?: never;
    $unknown?: never;
  }
  interface RetrievalMember {
    input?: never;
    output?: never;
    knowledgeBase?: never;
    condition?: never;
    lex?: never;
    prompt?: never;
    lambdaFunction?: never;
    storage?: never;
    agent?: never;
    retrieval: RetrievalFlowNodeConfiguration;
    iterator?: never;
    collector?: never;
    $unknown?: never;
  }
  interface IteratorMember {
    input?: never;
    output?: never;
    knowledgeBase?: never;
    condition?: never;
    lex?: never;
    prompt?: never;
    lambdaFunction?: never;
    storage?: never;
    agent?: never;
    retrieval?: never;
    iterator: IteratorFlowNodeConfiguration;
    collector?: never;
    $unknown?: never;
  }
  interface CollectorMember {
    input?: never;
    output?: never;
    knowledgeBase?: never;
    condition?: never;
    lex?: never;
    prompt?: never;
    lambdaFunction?: never;
    storage?: never;
    agent?: never;
    retrieval?: never;
    iterator?: never;
    collector: CollectorFlowNodeConfiguration;
    $unknown?: never;
  }
  interface $UnknownMember {
    input?: never;
    output?: never;
    knowledgeBase?: never;
    condition?: never;
    lex?: never;
    prompt?: never;
    lambdaFunction?: never;
    storage?: never;
    agent?: never;
    retrieval?: never;
    iterator?: never;
    collector?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    input: (value: InputFlowNodeConfiguration) => T;
    output: (value: OutputFlowNodeConfiguration) => T;
    knowledgeBase: (value: KnowledgeBaseFlowNodeConfiguration) => T;
    condition: (value: ConditionFlowNodeConfiguration) => T;
    lex: (value: LexFlowNodeConfiguration) => T;
    prompt: (value: PromptFlowNodeConfiguration) => T;
    lambdaFunction: (value: LambdaFunctionFlowNodeConfiguration) => T;
    storage: (value: StorageFlowNodeConfiguration) => T;
    agent: (value: AgentFlowNodeConfiguration) => T;
    retrieval: (value: RetrievalFlowNodeConfiguration) => T;
    iterator: (value: IteratorFlowNodeConfiguration) => T;
    collector: (value: CollectorFlowNodeConfiguration) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: FlowNodeConfiguration, visitor: Visitor<T>) => T;
}
export declare const FlowNodeIODataType: {
  readonly ARRAY: "Array";
  readonly BOOLEAN: "Boolean";
  readonly NUMBER: "Number";
  readonly OBJECT: "Object";
  readonly STRING: "String";
};
export type FlowNodeIODataType =
  (typeof FlowNodeIODataType)[keyof typeof FlowNodeIODataType];
export interface FlowNodeInput {
  name: string | undefined;
  type: FlowNodeIODataType | undefined;
  expression: string | undefined;
}
export interface FlowNodeOutput {
  name: string | undefined;
  type: FlowNodeIODataType | undefined;
}
export declare const FlowNodeType: {
  readonly AGENT: "Agent";
  readonly COLLECTOR: "Collector";
  readonly CONDITION: "Condition";
  readonly INPUT: "Input";
  readonly ITERATOR: "Iterator";
  readonly KNOWLEDGE_BASE: "KnowledgeBase";
  readonly LAMBDA_FUNCTION: "LambdaFunction";
  readonly LEX: "Lex";
  readonly OUTPUT: "Output";
  readonly PROMPT: "Prompt";
  readonly RETRIEVAL: "Retrieval";
  readonly STORAGE: "Storage";
};
export type FlowNodeType = (typeof FlowNodeType)[keyof typeof FlowNodeType];
export interface FlowNode {
  name: string | undefined;
  type: FlowNodeType | undefined;
  configuration?: FlowNodeConfiguration;
  inputs?: FlowNodeInput[];
  outputs?: FlowNodeOutput[];
}
export interface FlowDefinition {
  nodes?: FlowNode[];
  connections?: FlowConnection[];
}
export interface CreateFlowRequest {
  name: string | undefined;
  description?: string;
  executionRoleArn: string | undefined;
  customerEncryptionKeyArn?: string;
  definition?: FlowDefinition;
  clientToken?: string;
  tags?: Record<string, string>;
}
export declare const FlowStatus: {
  readonly FAILED: "Failed";
  readonly NOT_PREPARED: "NotPrepared";
  readonly PREPARED: "Prepared";
  readonly PREPARING: "Preparing";
};
export type FlowStatus = (typeof FlowStatus)[keyof typeof FlowStatus];
export interface CreateFlowResponse {
  name: string | undefined;
  description?: string;
  executionRoleArn: string | undefined;
  customerEncryptionKeyArn?: string;
  id: string | undefined;
  arn: string | undefined;
  status: FlowStatus | undefined;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
  version: string | undefined;
  definition?: FlowDefinition;
}
export interface DeleteFlowRequest {
  flowIdentifier: string | undefined;
  skipResourceInUseCheck?: boolean;
}
export interface DeleteFlowResponse {
  id: string | undefined;
}
export interface FlowAliasRoutingConfigurationListItem {
  flowVersion?: string;
}
export interface CreateFlowAliasRequest {
  name: string | undefined;
  description?: string;
  routingConfiguration: FlowAliasRoutingConfigurationListItem[] | undefined;
  flowIdentifier: string | undefined;
  clientToken?: string;
  tags?: Record<string, string>;
}
export interface CreateFlowAliasResponse {
  name: string | undefined;
  description?: string;
  routingConfiguration: FlowAliasRoutingConfigurationListItem[] | undefined;
  flowId: string | undefined;
  id: string | undefined;
  arn: string | undefined;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
}
export interface DeleteFlowAliasRequest {
  flowIdentifier: string | undefined;
  aliasIdentifier: string | undefined;
}
export interface DeleteFlowAliasResponse {
  flowId: string | undefined;
  id: string | undefined;
}
export interface GetFlowAliasRequest {
  flowIdentifier: string | undefined;
  aliasIdentifier: string | undefined;
}
export interface GetFlowAliasResponse {
  name: string | undefined;
  description?: string;
  routingConfiguration: FlowAliasRoutingConfigurationListItem[] | undefined;
  flowId: string | undefined;
  id: string | undefined;
  arn: string | undefined;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
}
export interface ListFlowAliasesRequest {
  flowIdentifier: string | undefined;
  maxResults?: number;
  nextToken?: string;
}
export interface FlowAliasSummary {
  name: string | undefined;
  description?: string;
  routingConfiguration: FlowAliasRoutingConfigurationListItem[] | undefined;
  flowId: string | undefined;
  id: string | undefined;
  arn: string | undefined;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
}
export interface ListFlowAliasesResponse {
  flowAliasSummaries: FlowAliasSummary[] | undefined;
  nextToken?: string;
}
export interface UpdateFlowAliasRequest {
  name: string | undefined;
  description?: string;
  routingConfiguration: FlowAliasRoutingConfigurationListItem[] | undefined;
  flowIdentifier: string | undefined;
  aliasIdentifier: string | undefined;
}
export interface UpdateFlowAliasResponse {
  name: string | undefined;
  description?: string;
  routingConfiguration: FlowAliasRoutingConfigurationListItem[] | undefined;
  flowId: string | undefined;
  id: string | undefined;
  arn: string | undefined;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
}
export interface CreateFlowVersionRequest {
  flowIdentifier: string | undefined;
  description?: string;
  clientToken?: string;
}
export interface CreateFlowVersionResponse {
  name: string | undefined;
  description?: string;
  executionRoleArn: string | undefined;
  customerEncryptionKeyArn?: string;
  id: string | undefined;
  arn: string | undefined;
  status: FlowStatus | undefined;
  createdAt: Date | undefined;
  version: string | undefined;
  definition?: FlowDefinition;
}
export interface DeleteFlowVersionRequest {
  flowIdentifier: string | undefined;
  flowVersion: string | undefined;
  skipResourceInUseCheck?: boolean;
}
export interface DeleteFlowVersionResponse {
  id: string | undefined;
  version: string | undefined;
}
export interface GetFlowVersionRequest {
  flowIdentifier: string | undefined;
  flowVersion: string | undefined;
}
export interface GetFlowVersionResponse {
  name: string | undefined;
  description?: string;
  executionRoleArn: string | undefined;
  customerEncryptionKeyArn?: string;
  id: string | undefined;
  arn: string | undefined;
  status: FlowStatus | undefined;
  createdAt: Date | undefined;
  version: string | undefined;
  definition?: FlowDefinition;
}
export interface ListFlowVersionsRequest {
  flowIdentifier: string | undefined;
  maxResults?: number;
  nextToken?: string;
}
export interface FlowVersionSummary {
  id: string | undefined;
  arn: string | undefined;
  status: FlowStatus | undefined;
  createdAt: Date | undefined;
  version: string | undefined;
}
export interface ListFlowVersionsResponse {
  flowVersionSummaries: FlowVersionSummary[] | undefined;
  nextToken?: string;
}
export interface GetFlowRequest {
  flowIdentifier: string | undefined;
}
export declare const FlowValidationSeverity: {
  readonly ERROR: "Error";
  readonly WARNING: "Warning";
};
export type FlowValidationSeverity =
  (typeof FlowValidationSeverity)[keyof typeof FlowValidationSeverity];
export interface FlowValidation {
  message: string | undefined;
  severity: FlowValidationSeverity | undefined;
}
export interface GetFlowResponse {
  name: string | undefined;
  description?: string;
  executionRoleArn: string | undefined;
  customerEncryptionKeyArn?: string;
  id: string | undefined;
  arn: string | undefined;
  status: FlowStatus | undefined;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
  version: string | undefined;
  definition?: FlowDefinition;
  validations?: FlowValidation[];
}
export interface ListFlowsRequest {
  maxResults?: number;
  nextToken?: string;
}
export interface FlowSummary {
  name: string | undefined;
  description?: string;
  id: string | undefined;
  arn: string | undefined;
  status: FlowStatus | undefined;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
  version: string | undefined;
}
export interface ListFlowsResponse {
  flowSummaries: FlowSummary[] | undefined;
  nextToken?: string;
}
export interface PrepareFlowRequest {
  flowIdentifier: string | undefined;
}
export interface PrepareFlowResponse {
  id: string | undefined;
  status: FlowStatus | undefined;
}
export interface UpdateFlowRequest {
  name: string | undefined;
  description?: string;
  executionRoleArn: string | undefined;
  customerEncryptionKeyArn?: string;
  definition?: FlowDefinition;
  flowIdentifier: string | undefined;
}
export interface UpdateFlowResponse {
  name: string | undefined;
  description?: string;
  executionRoleArn: string | undefined;
  customerEncryptionKeyArn?: string;
  id: string | undefined;
  arn: string | undefined;
  status: FlowStatus | undefined;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
  version: string | undefined;
  definition?: FlowDefinition;
}
export interface GetIngestionJobRequest {
  knowledgeBaseId: string | undefined;
  dataSourceId: string | undefined;
  ingestionJobId: string | undefined;
}
export interface IngestionJobStatistics {
  numberOfDocumentsScanned?: number;
  numberOfMetadataDocumentsScanned?: number;
  numberOfNewDocumentsIndexed?: number;
  numberOfModifiedDocumentsIndexed?: number;
  numberOfMetadataDocumentsModified?: number;
  numberOfDocumentsDeleted?: number;
  numberOfDocumentsFailed?: number;
}
export declare const IngestionJobStatus: {
  readonly COMPLETE: "COMPLETE";
  readonly FAILED: "FAILED";
  readonly IN_PROGRESS: "IN_PROGRESS";
  readonly STARTING: "STARTING";
};
export type IngestionJobStatus =
  (typeof IngestionJobStatus)[keyof typeof IngestionJobStatus];
export interface IngestionJob {
  knowledgeBaseId: string | undefined;
  dataSourceId: string | undefined;
  ingestionJobId: string | undefined;
  description?: string;
  status: IngestionJobStatus | undefined;
  statistics?: IngestionJobStatistics;
  failureReasons?: string[];
  startedAt: Date | undefined;
  updatedAt: Date | undefined;
}
export interface GetIngestionJobResponse {
  ingestionJob: IngestionJob | undefined;
}
export declare const IngestionJobFilterAttribute: {
  readonly STATUS: "STATUS";
};
export type IngestionJobFilterAttribute =
  (typeof IngestionJobFilterAttribute)[keyof typeof IngestionJobFilterAttribute];
export declare const IngestionJobFilterOperator: {
  readonly EQ: "EQ";
};
export type IngestionJobFilterOperator =
  (typeof IngestionJobFilterOperator)[keyof typeof IngestionJobFilterOperator];
export interface IngestionJobFilter {
  attribute: IngestionJobFilterAttribute | undefined;
  operator: IngestionJobFilterOperator | undefined;
  values: string[] | undefined;
}
export declare const IngestionJobSortByAttribute: {
  readonly STARTED_AT: "STARTED_AT";
  readonly STATUS: "STATUS";
};
export type IngestionJobSortByAttribute =
  (typeof IngestionJobSortByAttribute)[keyof typeof IngestionJobSortByAttribute];
export declare const SortOrder: {
  readonly ASCENDING: "ASCENDING";
  readonly DESCENDING: "DESCENDING";
};
export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder];
export interface IngestionJobSortBy {
  attribute: IngestionJobSortByAttribute | undefined;
  order: SortOrder | undefined;
}
export interface ListIngestionJobsRequest {
  knowledgeBaseId: string | undefined;
  dataSourceId: string | undefined;
  filters?: IngestionJobFilter[];
  sortBy?: IngestionJobSortBy;
  maxResults?: number;
  nextToken?: string;
}
export interface IngestionJobSummary {
  knowledgeBaseId: string | undefined;
  dataSourceId: string | undefined;
  ingestionJobId: string | undefined;
  description?: string;
  status: IngestionJobStatus | undefined;
  startedAt: Date | undefined;
  updatedAt: Date | undefined;
  statistics?: IngestionJobStatistics;
}
export interface ListIngestionJobsResponse {
  ingestionJobSummaries: IngestionJobSummary[] | undefined;
  nextToken?: string;
}
export interface StartIngestionJobRequest {
  knowledgeBaseId: string | undefined;
  dataSourceId: string | undefined;
  clientToken?: string;
  description?: string;
}
export interface StartIngestionJobResponse {
  ingestionJob: IngestionJob | undefined;
}
export interface AssociateAgentKnowledgeBaseRequest {
  agentId: string | undefined;
  agentVersion: string | undefined;
  knowledgeBaseId: string | undefined;
  description: string | undefined;
  knowledgeBaseState?: KnowledgeBaseState;
}
export interface AssociateAgentKnowledgeBaseResponse {
  agentKnowledgeBase: AgentKnowledgeBase | undefined;
}
export declare const KnowledgeBaseType: {
  readonly VECTOR: "VECTOR";
};
export type KnowledgeBaseType =
  (typeof KnowledgeBaseType)[keyof typeof KnowledgeBaseType];
export interface BedrockEmbeddingModelConfiguration {
  dimensions?: number;
}
export interface EmbeddingModelConfiguration {
  bedrockEmbeddingModelConfiguration?: BedrockEmbeddingModelConfiguration;
}
export interface VectorKnowledgeBaseConfiguration {
  embeddingModelArn: string | undefined;
  embeddingModelConfiguration?: EmbeddingModelConfiguration;
}
export interface KnowledgeBaseConfiguration {
  type: KnowledgeBaseType | undefined;
  vectorKnowledgeBaseConfiguration?: VectorKnowledgeBaseConfiguration;
}
export interface MongoDbAtlasFieldMapping {
  vectorField: string | undefined;
  textField: string | undefined;
  metadataField: string | undefined;
}
export interface MongoDbAtlasConfiguration {
  endpoint: string | undefined;
  databaseName: string | undefined;
  collectionName: string | undefined;
  vectorIndexName: string | undefined;
  credentialsSecretArn: string | undefined;
  fieldMapping: MongoDbAtlasFieldMapping | undefined;
  endpointServiceName?: string;
}
export interface OpenSearchServerlessFieldMapping {
  vectorField: string | undefined;
  textField: string | undefined;
  metadataField: string | undefined;
}
export interface OpenSearchServerlessConfiguration {
  collectionArn: string | undefined;
  vectorIndexName: string | undefined;
  fieldMapping: OpenSearchServerlessFieldMapping | undefined;
}
export interface PineconeFieldMapping {
  textField: string | undefined;
  metadataField: string | undefined;
}
export interface PineconeConfiguration {
  connectionString: string | undefined;
  credentialsSecretArn: string | undefined;
  namespace?: string;
  fieldMapping: PineconeFieldMapping | undefined;
}
export interface RdsFieldMapping {
  primaryKeyField: string | undefined;
  vectorField: string | undefined;
  textField: string | undefined;
  metadataField: string | undefined;
}
export interface RdsConfiguration {
  resourceArn: string | undefined;
  credentialsSecretArn: string | undefined;
  databaseName: string | undefined;
  tableName: string | undefined;
  fieldMapping: RdsFieldMapping | undefined;
}
export interface RedisEnterpriseCloudFieldMapping {
  vectorField: string | undefined;
  textField: string | undefined;
  metadataField: string | undefined;
}
export interface RedisEnterpriseCloudConfiguration {
  endpoint: string | undefined;
  vectorIndexName: string | undefined;
  credentialsSecretArn: string | undefined;
  fieldMapping: RedisEnterpriseCloudFieldMapping | undefined;
}
export declare const KnowledgeBaseStorageType: {
  readonly MONGO_DB_ATLAS: "MONGO_DB_ATLAS";
  readonly OPENSEARCH_SERVERLESS: "OPENSEARCH_SERVERLESS";
  readonly PINECONE: "PINECONE";
  readonly RDS: "RDS";
  readonly REDIS_ENTERPRISE_CLOUD: "REDIS_ENTERPRISE_CLOUD";
};
export type KnowledgeBaseStorageType =
  (typeof KnowledgeBaseStorageType)[keyof typeof KnowledgeBaseStorageType];
export interface StorageConfiguration {
  type: KnowledgeBaseStorageType | undefined;
  opensearchServerlessConfiguration?: OpenSearchServerlessConfiguration;
  pineconeConfiguration?: PineconeConfiguration;
  redisEnterpriseCloudConfiguration?: RedisEnterpriseCloudConfiguration;
  rdsConfiguration?: RdsConfiguration;
  mongoDbAtlasConfiguration?: MongoDbAtlasConfiguration;
}
export interface CreateKnowledgeBaseRequest {
  clientToken?: string;
  name: string | undefined;
  description?: string;
  roleArn: string | undefined;
  knowledgeBaseConfiguration: KnowledgeBaseConfiguration | undefined;
  storageConfiguration: StorageConfiguration | undefined;
  tags?: Record<string, string>;
}
export declare const KnowledgeBaseStatus: {
  readonly ACTIVE: "ACTIVE";
  readonly CREATING: "CREATING";
  readonly DELETE_UNSUCCESSFUL: "DELETE_UNSUCCESSFUL";
  readonly DELETING: "DELETING";
  readonly FAILED: "FAILED";
  readonly UPDATING: "UPDATING";
};
export type KnowledgeBaseStatus =
  (typeof KnowledgeBaseStatus)[keyof typeof KnowledgeBaseStatus];
export interface KnowledgeBase {
  knowledgeBaseId: string | undefined;
  name: string | undefined;
  knowledgeBaseArn: string | undefined;
  description?: string;
  roleArn: string | undefined;
  knowledgeBaseConfiguration: KnowledgeBaseConfiguration | undefined;
  storageConfiguration: StorageConfiguration | undefined;
  status: KnowledgeBaseStatus | undefined;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
  failureReasons?: string[];
}
export interface CreateKnowledgeBaseResponse {
  knowledgeBase: KnowledgeBase | undefined;
}
export interface DeleteKnowledgeBaseRequest {
  knowledgeBaseId: string | undefined;
}
export interface DeleteKnowledgeBaseResponse {
  knowledgeBaseId: string | undefined;
  status: KnowledgeBaseStatus | undefined;
}
export interface DisassociateAgentKnowledgeBaseRequest {
  agentId: string | undefined;
  agentVersion: string | undefined;
  knowledgeBaseId: string | undefined;
}
export interface DisassociateAgentKnowledgeBaseResponse {}
export interface GetAgentKnowledgeBaseRequest {
  agentId: string | undefined;
  agentVersion: string | undefined;
  knowledgeBaseId: string | undefined;
}
export interface GetAgentKnowledgeBaseResponse {
  agentKnowledgeBase: AgentKnowledgeBase | undefined;
}
export interface GetKnowledgeBaseRequest {
  knowledgeBaseId: string | undefined;
}
export interface GetKnowledgeBaseResponse {
  knowledgeBase: KnowledgeBase | undefined;
}
export interface ListAgentKnowledgeBasesRequest {
  agentId: string | undefined;
  agentVersion: string | undefined;
  maxResults?: number;
  nextToken?: string;
}
export interface ListAgentKnowledgeBasesResponse {
  agentKnowledgeBaseSummaries: AgentKnowledgeBaseSummary[] | undefined;
  nextToken?: string;
}
export interface ListKnowledgeBasesRequest {
  maxResults?: number;
  nextToken?: string;
}
export interface KnowledgeBaseSummary {
  knowledgeBaseId: string | undefined;
  name: string | undefined;
  description?: string;
  status: KnowledgeBaseStatus | undefined;
  updatedAt: Date | undefined;
}
export interface ListKnowledgeBasesResponse {
  knowledgeBaseSummaries: KnowledgeBaseSummary[] | undefined;
  nextToken?: string;
}
export interface UpdateAgentKnowledgeBaseRequest {
  agentId: string | undefined;
  agentVersion: string | undefined;
  knowledgeBaseId: string | undefined;
  description?: string;
  knowledgeBaseState?: KnowledgeBaseState;
}
export interface UpdateAgentKnowledgeBaseResponse {
  agentKnowledgeBase: AgentKnowledgeBase | undefined;
}
export interface UpdateKnowledgeBaseRequest {
  knowledgeBaseId: string | undefined;
  name: string | undefined;
  description?: string;
  roleArn: string | undefined;
  knowledgeBaseConfiguration: KnowledgeBaseConfiguration | undefined;
  storageConfiguration: StorageConfiguration | undefined;
}
export interface UpdateKnowledgeBaseResponse {
  knowledgeBase: KnowledgeBase | undefined;
}
export interface PromptVariant {
  name: string | undefined;
  templateType: PromptTemplateType | undefined;
  templateConfiguration?: PromptTemplateConfiguration;
  modelId?: string;
  inferenceConfiguration?: PromptInferenceConfiguration;
}
export interface CreatePromptRequest {
  name: string | undefined;
  description?: string;
  customerEncryptionKeyArn?: string;
  defaultVariant?: string;
  variants?: PromptVariant[];
  clientToken?: string;
  tags?: Record<string, string>;
}
export interface CreatePromptResponse {
  name: string | undefined;
  description?: string;
  customerEncryptionKeyArn?: string;
  defaultVariant?: string;
  variants?: PromptVariant[];
  id: string | undefined;
  arn: string | undefined;
  version: string | undefined;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
}
export interface CreatePromptVersionRequest {
  promptIdentifier: string | undefined;
  description?: string;
  clientToken?: string;
  tags?: Record<string, string>;
}
export interface CreatePromptVersionResponse {
  name: string | undefined;
  description?: string;
  customerEncryptionKeyArn?: string;
  defaultVariant?: string;
  variants?: PromptVariant[];
  id: string | undefined;
  arn: string | undefined;
  version: string | undefined;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
}
export interface DeletePromptRequest {
  promptIdentifier: string | undefined;
  promptVersion?: string;
}
export interface DeletePromptResponse {
  id: string | undefined;
  version?: string;
}
export interface GetPromptRequest {
  promptIdentifier: string | undefined;
  promptVersion?: string;
}
export interface GetPromptResponse {
  name: string | undefined;
  description?: string;
  customerEncryptionKeyArn?: string;
  defaultVariant?: string;
  variants?: PromptVariant[];
  id: string | undefined;
  arn: string | undefined;
  version: string | undefined;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
}
export interface ListPromptsRequest {
  promptIdentifier?: string;
  maxResults?: number;
  nextToken?: string;
}
export interface PromptSummary {
  name: string | undefined;
  description?: string;
  id: string | undefined;
  arn: string | undefined;
  version: string | undefined;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
}
export interface ListPromptsResponse {
  promptSummaries: PromptSummary[] | undefined;
  nextToken?: string;
}
export interface UpdatePromptRequest {
  name: string | undefined;
  description?: string;
  customerEncryptionKeyArn?: string;
  defaultVariant?: string;
  variants?: PromptVariant[];
  promptIdentifier: string | undefined;
}
export interface UpdatePromptResponse {
  name: string | undefined;
  description?: string;
  customerEncryptionKeyArn?: string;
  defaultVariant?: string;
  variants?: PromptVariant[];
  id: string | undefined;
  arn: string | undefined;
  version: string | undefined;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
}
export interface ListTagsForResourceRequest {
  resourceArn: string | undefined;
}
export interface ListTagsForResourceResponse {
  tags?: Record<string, string>;
}
export interface TagResourceRequest {
  resourceArn: string | undefined;
  tags: Record<string, string> | undefined;
}
export interface TagResourceResponse {}
export interface UntagResourceRequest {
  resourceArn: string | undefined;
  tagKeys: string[] | undefined;
}
export interface UntagResourceResponse {}
export interface DeleteAgentVersionRequest {
  agentId: string | undefined;
  agentVersion: string | undefined;
  skipResourceInUseCheck?: boolean;
}
export interface DeleteAgentVersionResponse {
  agentId: string | undefined;
  agentVersion: string | undefined;
  agentStatus: AgentStatus | undefined;
}
export interface GetAgentVersionRequest {
  agentId: string | undefined;
  agentVersion: string | undefined;
}
export interface GetAgentVersionResponse {
  agentVersion: AgentVersion | undefined;
}
export interface ListAgentVersionsRequest {
  agentId: string | undefined;
  maxResults?: number;
  nextToken?: string;
}
export interface ListAgentVersionsResponse {
  agentVersionSummaries: AgentVersionSummary[] | undefined;
  nextToken?: string;
}
export declare const APISchemaFilterSensitiveLog: (obj: APISchema) => any;
export declare const CreateAgentActionGroupRequestFilterSensitiveLog: (
  obj: CreateAgentActionGroupRequest
) => any;
export declare const AgentActionGroupFilterSensitiveLog: (
  obj: AgentActionGroup
) => any;
export declare const CreateAgentActionGroupResponseFilterSensitiveLog: (
  obj: CreateAgentActionGroupResponse
) => any;
export declare const GetAgentActionGroupResponseFilterSensitiveLog: (
  obj: GetAgentActionGroupResponse
) => any;
export declare const UpdateAgentActionGroupRequestFilterSensitiveLog: (
  obj: UpdateAgentActionGroupRequest
) => any;
export declare const UpdateAgentActionGroupResponseFilterSensitiveLog: (
  obj: UpdateAgentActionGroupResponse
) => any;
export declare const PromptConfigurationFilterSensitiveLog: (
  obj: PromptConfiguration
) => any;
export declare const PromptOverrideConfigurationFilterSensitiveLog: (
  obj: PromptOverrideConfiguration
) => any;
export declare const AgentFilterSensitiveLog: (obj: Agent) => any;
export declare const CreateAgentRequestFilterSensitiveLog: (
  obj: CreateAgentRequest
) => any;
export declare const CreateAgentResponseFilterSensitiveLog: (
  obj: CreateAgentResponse
) => any;
export declare const GetAgentResponseFilterSensitiveLog: (
  obj: GetAgentResponse
) => any;
export declare const UpdateAgentRequestFilterSensitiveLog: (
  obj: UpdateAgentRequest
) => any;
export declare const UpdateAgentResponseFilterSensitiveLog: (
  obj: UpdateAgentResponse
) => any;
export declare const AgentVersionFilterSensitiveLog: (obj: AgentVersion) => any;
export declare const PatternObjectFilterFilterSensitiveLog: (
  obj: PatternObjectFilter
) => any;
export declare const PatternObjectFilterConfigurationFilterSensitiveLog: (
  obj: PatternObjectFilterConfiguration
) => any;
export declare const CrawlFilterConfigurationFilterSensitiveLog: (
  obj: CrawlFilterConfiguration
) => any;
export declare const ConfluenceCrawlerConfigurationFilterSensitiveLog: (
  obj: ConfluenceCrawlerConfiguration
) => any;
export declare const ConfluenceDataSourceConfigurationFilterSensitiveLog: (
  obj: ConfluenceDataSourceConfiguration
) => any;
export declare const S3DataSourceConfigurationFilterSensitiveLog: (
  obj: S3DataSourceConfiguration
) => any;
export declare const SalesforceCrawlerConfigurationFilterSensitiveLog: (
  obj: SalesforceCrawlerConfiguration
) => any;
export declare const SalesforceDataSourceConfigurationFilterSensitiveLog: (
  obj: SalesforceDataSourceConfiguration
) => any;
export declare const SharePointCrawlerConfigurationFilterSensitiveLog: (
  obj: SharePointCrawlerConfiguration
) => any;
export declare const SharePointDataSourceConfigurationFilterSensitiveLog: (
  obj: SharePointDataSourceConfiguration
) => any;
export declare const WebCrawlerConfigurationFilterSensitiveLog: (
  obj: WebCrawlerConfiguration
) => any;
export declare const WebDataSourceConfigurationFilterSensitiveLog: (
  obj: WebDataSourceConfiguration
) => any;
export declare const DataSourceConfigurationFilterSensitiveLog: (
  obj: DataSourceConfiguration
) => any;
export declare const CreateDataSourceRequestFilterSensitiveLog: (
  obj: CreateDataSourceRequest
) => any;
export declare const DataSourceFilterSensitiveLog: (obj: DataSource) => any;
export declare const CreateDataSourceResponseFilterSensitiveLog: (
  obj: CreateDataSourceResponse
) => any;
export declare const GetDataSourceResponseFilterSensitiveLog: (
  obj: GetDataSourceResponse
) => any;
export declare const UpdateDataSourceRequestFilterSensitiveLog: (
  obj: UpdateDataSourceRequest
) => any;
export declare const UpdateDataSourceResponseFilterSensitiveLog: (
  obj: UpdateDataSourceResponse
) => any;
export declare const FlowConditionFilterSensitiveLog: (
  obj: FlowCondition
) => any;
export declare const ConditionFlowNodeConfigurationFilterSensitiveLog: (
  obj: ConditionFlowNodeConfiguration
) => any;
export declare const TextPromptTemplateConfigurationFilterSensitiveLog: (
  obj: TextPromptTemplateConfiguration
) => any;
export declare const PromptTemplateConfigurationFilterSensitiveLog: (
  obj: PromptTemplateConfiguration
) => any;
export declare const PromptFlowNodeInlineConfigurationFilterSensitiveLog: (
  obj: PromptFlowNodeInlineConfiguration
) => any;
export declare const PromptFlowNodeSourceConfigurationFilterSensitiveLog: (
  obj: PromptFlowNodeSourceConfiguration
) => any;
export declare const PromptFlowNodeConfigurationFilterSensitiveLog: (
  obj: PromptFlowNodeConfiguration
) => any;
export declare const FlowNodeConfigurationFilterSensitiveLog: (
  obj: FlowNodeConfiguration
) => any;
export declare const FlowNodeInputFilterSensitiveLog: (
  obj: FlowNodeInput
) => any;
export declare const FlowNodeFilterSensitiveLog: (obj: FlowNode) => any;
export declare const FlowDefinitionFilterSensitiveLog: (
  obj: FlowDefinition
) => any;
export declare const CreateFlowRequestFilterSensitiveLog: (
  obj: CreateFlowRequest
) => any;
export declare const CreateFlowResponseFilterSensitiveLog: (
  obj: CreateFlowResponse
) => any;
export declare const CreateFlowVersionResponseFilterSensitiveLog: (
  obj: CreateFlowVersionResponse
) => any;
export declare const GetFlowVersionResponseFilterSensitiveLog: (
  obj: GetFlowVersionResponse
) => any;
export declare const GetFlowResponseFilterSensitiveLog: (
  obj: GetFlowResponse
) => any;
export declare const UpdateFlowRequestFilterSensitiveLog: (
  obj: UpdateFlowRequest
) => any;
export declare const UpdateFlowResponseFilterSensitiveLog: (
  obj: UpdateFlowResponse
) => any;
export declare const PromptVariantFilterSensitiveLog: (
  obj: PromptVariant
) => any;
export declare const CreatePromptRequestFilterSensitiveLog: (
  obj: CreatePromptRequest
) => any;
export declare const CreatePromptResponseFilterSensitiveLog: (
  obj: CreatePromptResponse
) => any;
export declare const CreatePromptVersionResponseFilterSensitiveLog: (
  obj: CreatePromptVersionResponse
) => any;
export declare const GetPromptResponseFilterSensitiveLog: (
  obj: GetPromptResponse
) => any;
export declare const UpdatePromptRequestFilterSensitiveLog: (
  obj: UpdatePromptRequest
) => any;
export declare const UpdatePromptResponseFilterSensitiveLog: (
  obj: UpdatePromptResponse
) => any;
export declare const GetAgentVersionResponseFilterSensitiveLog: (
  obj: GetAgentVersionResponse
) => any;
